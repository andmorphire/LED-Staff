#include "FastLED.h"

// This sketch shows how to sequence a performance using HH,MM,SS.SSS timecode.
//
// A "ResetPerformance" method is provided so that the performance can be
// restarted from a custom external trigger, e.g., a button or event.
// For demonstration purposes, this Performance is reset if the
// sketch receives a letter "r" on the serial port.
//
// -Mark Kriegsman, January 2015

#if FASTLED_VERSION < 3001000
#error "Requires FastLED 3.1 or later; check github for latest code."
#endif

#define DATA_PIN    3
//#define CLK_PIN   4
#define LED_TYPE    WS2812B
#define COLOR_ORDER GRB
#define NUM_LEDS    90
CRGB leds[NUM_LEDS];

#define BRIGHTNESS          255
#define FRAMES_PER_SECOND  240


#define FREQUENCY     5                // controls the interval between strikes for lightning
#define FLASHES       20                 // the upper limit of flashes per strike for lightning
// #define color White; //for lightning- do we need this?
unsigned int dimmer = 1; // for lightning


uint8_t hue = 32;  //for meteor
byte idex = 255;   //for meteor
byte meteorLength = 29;  //for meteor


void setup() {
  delay(300); // 0.3 second delay for recovery
  
  // tell FastLED about the LED strip configuration
  FastLED.addLeds<LED_TYPE,DATA_PIN,COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
  //FastLED.addLeds<LED_TYPE,DATA_PIN,CLK_PIN,COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);

  // set master brightness control
  FastLED.setBrightness(BRIGHTNESS);
  
  // RestartPerformance();
  Serial.begin(57600);
}


uint8_t gHue = 0; // rotating "base color" used by many of the patterns
  
uint32_t gTimeCodeBase = 0;
uint32_t gTimeCode = 0;
uint32_t gLastTimeCodeDoneAt = 0;
uint32_t gLastTimeCodeDoneFrom = 0;

#define TC(HOURS,MINUTES,SECONDS) \
  ((uint32_t)(((uint32_t)((HOURS)*(uint32_t)(3600000))) + \
  ((uint32_t)((MINUTES)*(uint32_t)(60000))) + \
  ((uint32_t)((SECONDS)*(uint32_t)(1000)))))


#define AT(HOURS,MINUTES,SECONDS) if( atTC(TC(HOURS,MINUTES,SECONDS)) )
#define FROM(HOURS,MINUTES,SECONDS) if( fromTC(TC(HOURS,MINUTES,SECONDS)) )

static bool atTC( uint32_t tc)
{
  bool maybe = false;
  if( gTimeCode >= tc) {
    if( gLastTimeCodeDoneAt < tc) {
      maybe = true;
      gLastTimeCodeDoneAt = tc;
    }
  }
  return maybe;
}

static bool fromTC( uint32_t tc)
{
  bool maybe = false;
  if( gTimeCode >= tc) {
    if( gLastTimeCodeDoneFrom <= tc) {
      maybe = true;
      gLastTimeCodeDoneFrom = tc;
    }
  }
  return maybe;
}


// There are two kinds of things you can put into this performance:
// "FROM" and "AT".
//
// * "FROM" means starting FROM this time AND CALLING IT REPEATEDLY 
//   until the next "FROM" time comes.
//
// * "AT" means do this ONE TIME ONLY "AT" the designated time.
//
// At least one of the FROM clauses will ALWAYS be executed.
// In the transitional times, TWO pieces of code will be executed back to back.
// For example, if one piece says "FROM(0,0,1.000) {DrawRed()}" and another says
// "FROM(0,0,2.000) {flashblue();}", what you'll get is this:
//   00:00:01.950  -> calls DrawRed
//   00:00:01.975  -> calls DrawRed
//   00:00:02.000  -> calls DrawRed AND calls DrawBlue !
//   00:00:02.025  -> calls DrawBlue
//   00:00:02.050  -> calls DrawBlue
// In most cases, this probably isn't significant in practice, but it's important
// to note.  It could be avoided by listing the sequence steps in reverse
// chronological order, but that makes it hard to read.

void Performance()
{
    AT(0,0,00.001) { FastLED.setBrightness(BRIGHTNESS); }
  FROM(0,0,00.100) { sinelon(); }
  FROM(0,0,07.120) { meteor(); }
  FROM(0,0,17.010) { confetti(); }
  FROM(0,0,25.760) { rainbow(); }
  FROM(0,0,33.000) { fadeToBlack(); }
  FROM(0,0,34.050) { lightning(); }
  FROM(0,0,42.930) { povA(); }
  FROM(0,0,52.650) { juggle(); }
  FROM(0,1,00.930) { bpm(); }
  FROM(0,1,10.070) { colorshift(); }
  FROM(0,1,20.560) { sinelon(); }
  FROM(0,1,26.810) { juggle(); }
  FROM(0,1,32.810) { meteor(); }
  FROM(0,1,41.000) { fadeToBlack(); }
  FROM(0,1,42.000) { lightning(); }
  FROM(0,1,51.690) { povB(); }
  FROM(0,2,02.020) { povA(); }
  FROM(0,2,14.180) { rainbowWithGlitter(); }
  FROM(0,2,22.590) { colorshift(); }
  FROM(0,2,26.750) { povB(); }
  FROM(0,2,31.750) { confetti(); }
    AT(0,2,32.000)   { gHue = HUE_PINK; }
    AT(0,2,33.000)   { fill_solid(leds, NUM_LEDS, CRGB::Red); }
    AT(0,2,34.000)   { fill_solid(leds, NUM_LEDS, CRGB::Blue); } 
  FROM(0,2,35.000) { applause(); }  
    AT(0,2,36.000)   { FastLED.setBrightness(BRIGHTNESS/2); }
    AT(0,2,37.000)   { FastLED.setBrightness(BRIGHTNESS/4); }
    AT(0,2,38.000)   { FastLED.setBrightness(BRIGHTNESS/8); }
    AT(0,2,39.000)   { FastLED.setBrightness(BRIGHTNESS/16); }
  FROM(0,2,40.000) { fadeToBlack(); }  
}


void loop()
{
  // Set the current timecode, based on when the performance started
  gTimeCode = millis() - gTimeCodeBase;

  Performance();

  // send the 'leds' array out to the actual LED strip
  FastLED.show();  
  // insert a delay to keep the framerate modest
  FastLED.delay(1000/FRAMES_PER_SECOND); 

  // For demo purposes, restart the performance any time we read
  // the letter "r" character from the serial port.  Type "r" into 
  // the Arduino serial monitor and press return to restart the performance.
  // In practice, you could have this check a 'restart' button, or something similar.
  // if( Serial.read() == 'r') RestartPerformance();

  // do some periodic updates
  EVERY_N_MILLISECONDS( 20 ) { gHue++; } // slowly cycle the "base color" through the rainbow
}


void RestartPerformance()
{
  gLastTimeCodeDoneAt = 0;
  gLastTimeCodeDoneFrom = 0;
  gTimeCodeBase = millis();
}

void rainbow() 
{
  // FastLED's built-in rainbow generator
  fill_rainbow( leds, NUM_LEDS, gHue, 7);
}

void rainbowWithGlitter() 
{
  // built-in FastLED rainbow, plus some random sparkly glitter
  rainbow();
  addGlitter(80);
}

void addGlitter( fract8 chanceOfGlitter) 
{
  if( random8() < chanceOfGlitter) {
    leds[ random16(NUM_LEDS) ] += CRGB::White;
  }
}

void confetti() 
{
  // random colored speckles that blink in and fade smoothly
  fadeToBlackBy( leds, NUM_LEDS, 10);
  int pos = random16(NUM_LEDS);
  leds[pos] += CHSV( gHue + random8(64), 200, 255);
}

void bpm()
{
  // colored stripes pulsing at a defined Beats-Per-Minute (BPM)
  uint8_t BeatsPerMinute = 62;
  CRGBPalette16 palette = PartyColors_p;
  uint8_t beat = beatsin8( BeatsPerMinute, 64, 255);
  for( int i = 0; i < NUM_LEDS; i++) { //9948
    leds[i] = ColorFromPalette(palette, gHue+(i*2), beat-gHue+(i*10));
  }
}

void juggle() {
  // eight colored dots, weaving in and out of sync with each other
  fadeToBlackBy( leds, NUM_LEDS, 20);
  byte dothue = 0;
  for( int i = 0; i < 8; i++) {
    leds[beatsin16(i+7,0,NUM_LEDS -1)] |= CHSV(dothue, 200, 255);
    dothue += 32;
  }
}

void sinelon()
{
  // a colored dot sweeping back and forth, with fading trails
  fadeToBlackBy( leds, NUM_LEDS, 20);
  int pos = beatsin16(13,0,NUM_LEDS -1);
  leds[pos] += CHSV( gHue, 255, 192);
}

//void twosinelon()
//{
//  // a colored dot sweeping back and forth, with fading trails
//  fadeToBlackBy( leds, NUM_LEDS, 20);
//  int pos = beatsin16(13,0,NUM_LEDS -1);
//  int pos2 = beatsin16(13,NUM_LEDS -1,1);
//  leds[pos] += CHSV( gHue, 255, 192);
//  leds[pos2] += CHSV( gHue, 255, 192);
//}

// An animation to play while the crowd goes wild after the big performance
void applause()
{
  static uint16_t lastPixel = 0;
  fadeToBlackBy( leds, NUM_LEDS, 32);
  leds[lastPixel] = CHSV(random8(HUE_BLUE,HUE_PURPLE),255,255);
  lastPixel = random16(NUM_LEDS);
  leds[lastPixel] = CRGB::White;
}

// An "animation" to just fade to black.  Useful as the last track
// in a non-looping performance.
void fadeToBlack()
{
  fadeToBlackBy( leds, NUM_LEDS, 1);
}

const byte dataA[] PROGMEM = {};
void povA() {
  int pixels = 48;
  int frames = 16;
  int fps = 600;
  static int currentFrame = 0;

  for (int i=0; i<NUM_LEDS; i++) {
    int pixelIndex = i % pixels;
    int index = currentFrame*pixels*3 + pixelIndex*3;

    // Note: We're using pgm_read_byte_near to read bytes out of the data array stored in PROGMEM. These functions are not required for all configurations
    leds[i] = CRGB(pgm_read_byte_near(dataA+index),pgm_read_byte_near(dataA+index+1),pgm_read_byte_near(dataA+index+2));    
  }
  FastLED.show();
  currentFrame ++;
  if (currentFrame >= frames) currentFrame = 0;
}


const byte dataB[] PROGMEM = {};
void povB() {
  int pixels = 90;
  int frames = 22;
  int fps = 1;
  static int currentFrame = 0;

  for (int i=0; i<NUM_LEDS; i++) {
    int pixelIndex = i % pixels;
    int index = currentFrame*pixels*3 + pixelIndex*3;

    // Note: We're using pgm_read_byte_near to read bytes out of the data array stored in PROGMEM. These functions are not required for all configurations
    leds[i] = CRGB(pgm_read_byte_near(dataB+index),pgm_read_byte_near(dataB+index+1),pgm_read_byte_near(dataB+index+2));
  }
  FastLED.show();
  currentFrame ++;
  if (currentFrame >= frames) currentFrame = 0;
}

const byte dataC[] PROGMEM = {198,182,56,212,201,65,216,210,63,218,212,66,213,208,61,208,204,66,190,193,61,165,183,55,152,172,52,126,160,44,108,150,40,85,135,32,76,127,22,63,123,26,61,121,24,58,119,30,61,115,35,65,106,43,60,95,63,61,83,76,62,68,102,66,51,125,67,39,141,69,23,160,71,13,172,67,9,184,70,3,191,70,3,191,81,0,181,96,0,167,100,5,157,116,0,146,127,0,135,133,0,127,143,6,117,155,0,106,163,7,96,176,0,81,184,0,74,198,0,60,206,6,50,215,0,37,228,0,32,239,0,15,249,0,11,189,168,52,204,193,57,218,206,61,218,212,66,218,212,66,211,206,59,195,197,57,179,189,55,158,176,47,139,166,43,118,153,36,100,142,32,82,132,28,65,125,28,61,121,24,60,120,22,62,115,28,62,110,39,61,100,55,60,87,74,67,76,88,64,59,113,61,45,137,68,32,151,65,21,172,65,7,183,70,3,191,70,3,191,76,0,186,86,0,175,96,7,163,105,7,154,119,0,141,130,0,131,140,3,120,151,0,109,159,0,98,172,0,89,184,0,74,190,0,67,202,0,58,214,0,42,223,0,35,236,0,21,249,0,11,181,161,53,197,181,55,212,201,65,218,212,66,218,212,66,215,209,62,201,203,62,186,196,62,165,183,55,144,170,48,126,160,44,104,147,37,85,135,32,76,127,22,63,123,26,61,121,24,59,119,21,59,113,33,58,108,43,60,95,63,60,80,84,62,68,102,66,51,125,67,35,146,69,23,160,65,15,177,67,9,184,70,3,191,76,0,186,81,0,181,96,0,167,104,5,153,112,5,145,127,0,135,137,2,124,144,5,112,156,0,101,168,0,91,176,0,81,188,0,71,198,0,60,206,6,50,218,3,39,228,0,32,239,0,15,171,146,48,191,176,58,204,193,57,218,206,61,218,212,66,218,212,66,211,206,59,195,197,57,178,188,54,159,177,48,131,164,39,117,151,35,97,139,28,80,130,26,65,125,28,61,121,24,61,121,24,62,115,28,60,109,44,63,101,51,60,87,74,65,72,95,64,59,113,67,42,137,68,27,155,64,20,171,67,9,184,70,3,191,70,3,191,81,0,181,91,0,171,96,7,163,113,0,150,119,0,141,130,0,131,142,4,116,151,0,109,162,4,95,172,0,89,184,0,74,192,3,64,203,0,53,214,0,42,228,0,32,231,4,19,163,139,49,181,161,53,203,186,60,212,201,65,218,212,66,218,212,66,215,209,62,201,203,62,181,191,57,170,182,56,144,170,48,121,156,39,104,147,37,84,134,31,66,126,29,62,122,25,61,121,24,58,119,30,59,113,33,61,105,47,60,95,63,60,80,84,67,63,105,65,50,124,67,35,146,63,24,165,65,15,177,70,3,191,70,3,191,76,0,186,86,0,175,96,0,167,109,0,154,113,7,146,127,0,135,136,0,123,149,0,113,156,0,101,168,0,91,176,0,81,188,0,71,199,0,56,206,6,50,218,3,39,230,0,26,149,121,40,175,155,47,191,176,58,207,196,60,216,210,63,218,212,66,216,210,63,208,204,66,195,197,57,176,186,51,158,176,47,135,162,39,108,150,40,97,139,28,80,130,26,63,123,26,61,121,24,60,120,22,63,116,29,60,109,44,64,98,60,60,87,74,65,72,95,64,56,116,61,45,137,68,27,155,71,13,172,67,9,184,70,3,191,70,3,191,81,0,181,91,0,171,96,7,163,109,7,150,123,0,138,130,0,131,141,1,115,155,0,106,162,4,95,174,0,85,184,0,74,192,3,64,204,2,54,214,0,42,228,0,32,141,103,34,163,139,49,189,168,52,203,186,60,216,204,59,218,212,66,218,212,66,211,206,59,201,203,62,181,191,57,161,179,51,144,170,48,121,156,39,100,142,32,85,135,32,66,126,29,62,122,25,60,120,22,58,119,30,59,113,33,61,105,47,61,91,66,60,80,84,62,65,105,65,47,128,67,35,146,63,24,165,65,7,183,70,3,191,70,3,191,76,0,186,86,0,175,95,5,162,109,0,154,119,0,141,127,0,135,136,0,123,149,0,113,159,0,98,168,0,91,176,0,81,190,0,67,199,0,56,212,0,46,218,3,39,131,95,32,149,121,40,178,152,46,197,181,55,209,197,61,216,210,63,218,212,66,216,210,63,203,205,65,195,197,57,175,185,50,154,173,44,135,162,39,108,150,40,85,135,32,78,129,25,63,123,26,61,121,24,60,120,22,61,115,35,60,109,44,58,99,60,62,84,77,65,72,95,64,56,116,67,39,141,68,27,155,71,13,172,67,9,184,70,3,191,70,3,191,81,0,181,91,0,171,101,7,158,109,7,150,123,0,138,133,0,127,142,4,116,155,0,106,163,7,96,174,0,85,184,0,74,198,0,60,204,2,54,215,0,37,117,78,31,145,113,41,163,139,49,190,169,53,203,193,65,216,204,59,218,212,66,218,212,66,213,208,61,195,197,57,181,191,57,162,180,52,139,166,43,121,156,39,100,142,32,82,132,28,67,127,30,62,122,25,60,120,22,56,118,29,62,110,39,59,104,52,61,91,66,64,75,92,67,63,105,65,47,128,68,32,151,63,24,165,65,7,183,70,3,191,70,3,191,76,0,186,86,0,175,96,7,163,105,7,154,119,0,141,130,0,131,140,3,120,149,0,113,159,0,98,172,0,89,179,5,78,190,0,67,202,0,53,212,0,46,107,59,24,131,95,32,158,129,41,175,155,47,198,182,56,212,201,65,216,210,63,218,212,66,215,209,62,208,204,66,192,194,53,175,185,50,148,174,52,126,160,44,108,150,40,88,139,35,71,129,23,64,124,27,60,120,22,58,119,30,63,116,29,58,108,43,58,99,60,62,84,77,62,68,102,64,56,116,67,39,141,69,23,160,71,13,172,68,10,185,70,3,191,70,3,191,81,0,181,96,0,167,100,5,157,116,0,146,123,0,138,133,0,127,143,6,117,155,0,106,163,7,96,176,0,81,184,0,74,198,0,60,206,6,50,99,53,24,120,76,32,144,112,40,171,146,48,189,168,52,203,193,65,218,206,61,218,212,66,218,212,66,211,206,59,195,197,57,179,189,55,162,180,52,139,166,43,118,153,36,100,142,32,82,132,28,64,124,27,62,122,25,60,120,22,63,116,29,62,110,39,63,101,51,61,91,66,61,76,87,64,59,113,65,47,128,68,32,151,64,20,171,65,7,183,70,3,191,70,3,191,76,0,186,86,0,175,101,0,163,105,7,154,119,0,141,127,0,135,138,0,119,151,0,109,156,0,101,172,0,89,184,0,74,190,0,67,202,0,58,89,34,17,112,69,25,131,95,32,158,129,41,181,161,53,197,181,55,212,201,65,218,212,66,218,212,66,215,209,62,201,203,62,192,194,53,170,182,56,152,172,52,126,160,44,103,146,36,85,135,32,76,127,22,62,122,25,61,121,24,58,119,30,60,114,34,65,106,43,60,95,63,62,84,77,62,68,102,66,51,125,67,39,141,69,23,160,65,15,177,67,9,184,70,3,191,76,0,186,81,0,181,96,0,167,104,5,153,113,7,146,127,0,135,133,0,127,143,6,117,156,0,101,163,7,96,176,0,81,188,0,71,198,0,60,82,28,17,99,53,24,125,85,32,144,112,40,171,146,48,191,176,58,203,193,65,218,206,61,218,212,66,218,212,66,205,207,67,195,197,57,179,189,55,159,177,48,139,166,43,117,151,35,91,141,28,82,132,28,65,125,28,60,120,22,60,120,22,63,116,29,60,109,44,63,101,51,60,87,74,65,72,95,64,59,113,61,45,137,68,32,151,64,20,171,67,9,184,70,3,191,70,3,191,81,0,181,91,0,171,96,7,163,109,7,150,119,0,141,130,0,131,138,0,119,151,0,109,162,4,95,172,0,89,183,0,79,192,3,64,72,13,11,94,44,18,112,69,25,139,102,40,158,129,41,181,161,53,198,188,60,212,201,65,218,212,66,218,212,66,215,209,62,200,202,61,181,191,57,165,183,55,144,170,48,126,160,44,104,147,37,85,135,32,76,127,22,62,122,25,60,120,22,59,119,21,59,113,33,61,105,47,61,96,64,61,81,85,62,65,105,66,51,125,67,35,146,69,23,160,65,15,177,70,3,191,70,3,191,76,0,186,86,0,175,96,0,167,104,5,153,119,0,141,127,0,135,136,0,123,143,6,117,156,0,101,168,0,91,176,0,81,188,0,71,61,4,12,82,28,17,107,59,24,125,85,32,149,121,40,171,146,48,191,176,58,207,196,60,218,206,61,218,212,66,216,210,63,211,206,59,195,197,57,176,186,51,158,176,47,131,164,39,117,151,35,97,139,28,80,130,26,65,125,28,61,121,24,59,119,21,63,116,29,60,109,44,58,99,60,60,87,74,65,72,95,64,56,116,61,45,137,68,27,155,64,20,171,67,9,184,70,3,191,70,3,191,81,0,181,91,0,171,96,7,163,109,7,150,123,0,138,131,0,132,142,4,116,151,0,109,162,4,95,174,0,85,184,0,74,58,1,7,72,13,11,93,43,23,120,76,32,139,102,40,163,139,49,181,161,53,203,186,60,212,201,65,218,212,66,218,212,66,213,208,61,201,203,62,181,191,57,161,179,51,144,170,48,121,156,39,104,147,37,85,135,32,66,126,29,62,122,25,61,121,24,56,118,29,59,113,33,61,105,47,62,92,66,60,80,84,67,63,105,67,48,129,67,35,146,63,24,165,65,15,177,70,3,191,70,3,191,76,0,186,86,0,175,95,5,162,105,7,154,119,0,141,127,0,135,136,0,123,149,0,113,156,0,101,168,0,91,179,5,78,51,2,8,67,8,12,82,28,17,107,59,24,132,96,33,149,121,40,178,152,46,191,176,58,209,197,61,216,210,63,218,212,66,216,210,63,203,205,65,195,197,57,176,186,51,154,173,44,131,164,39,108,150,40,88,139,35,80,130,26,64,124,27,61,121,24,60,120,22,63,116,29,60,109,44,58,99,60,61,83,76,65,72,95,64,56,116,67,39,141,68,27,155,71,13,172,67,9,184,70,3,191,70,3,191,81,0,181,91,0,171,100,5,157,109,7,150,123,0,138,133,0,127,141,1,115,155,0,106,159,0,98,174,0,85,49,0,5,58,1,7,75,23,17,93,43,23,117,78,31,144,112,40,163,139,49,189,168,52,198,188,60,215,204,68,218,212,66,218,212,66,213,208,61,195,197,57,181,191,57,161,179,51,139,166,43,121,156,39,100,142,32,82,132,28,67,127,30,62,122,25,60,120,22,56,118,29,62,110,39,61,105,47,62,92,66,67,76,88,62,65,105,67,48,129,68,32,151,63,24,165,73,6,178,70,3,191,70,3,191,76,0,186,86,0,175,96,7,163,105,7,154,119,0,141,130,0,131,140,3,120,149,0,113,159,0,98,168,0,91,45,1,2,51,2,8,67,8,12,86,37,17,107,59,24,131,95,32,158,129,41,175,155,47,197,181,55,209,197,61,218,212,66,218,212,66,216,210,63,203,205,65,190,193,61,176,186,51,149,174,43,126,160,44,108,150,40,88,139,35,76,127,22,63,123,26,61,121,24,60,120,22,61,115,35,61,105,47,58,99,60,61,83,76,62,68,102,64,56,116,67,39,141,69,23,160,71,13,172,68,10,185,70,3,191,70,3,191,81,0,181,91,0,171,100,5,157,113,7,146,123,0,138,133,0,127,144,5,112,155,0,106,163,7,96,45,1,2,49,0,5,58,1,7,75,23,17,99,53,24,120,76,32,144,112,40,171,146,48,190,169,53,203,193,65,218,206,61,218,212,66,218,212,66,213,208,61,195,197,57,179,189,55,162,180,52,139,166,43,117,151,35,100,142,32,82,132,28,65,125,28,61,121,24,60,120,22,56,118,29,62,110,39,63,101,51,61,91,66,67,76,88,64,59,113,65,47,128,68,32,151,64,20,171,65,7,183,70,3,191,70,3,191,76,0,186,91,0,171,95,5,162,109,0,154,119,0,141,130,0,131,138,0,119,151,0,109,159,0,98};
void povC() {
  int pixels = 90;
  int frames = 22;
  int fps = 1;
  static int currentFrame = 0;

  for (int i=0; i<NUM_LEDS; i++) {
    int pixelIndex = i % pixels;
    int index = currentFrame*pixels*3 + pixelIndex*3;

    // Note: We're using pgm_read_byte_near to read bytes out of the data array stored in PROGMEM. These functions are not required for all configurations
    leds[i] = CRGB(pgm_read_byte_near(dataC+index),pgm_read_byte_near(dataC+index+1),pgm_read_byte_near(dataC+index+2));
  }
  FastLED.show();
  currentFrame ++;
  if (currentFrame >= frames) currentFrame = 0;
}


void lightning() 
{
  for (int flashCounter = 0; flashCounter < random8(3,FLASHES); flashCounter++)
  {
    if(flashCounter == 0) dimmer = 5;     // the brightness of the leader is scaled down by a factor of 5
    else dimmer = random8(1,3);           // return strokes are brighter than the leader
    
    FastLED.showColor(CHSV(255, 0, 255/dimmer));
    delay(random8(4,10));                 // each flash only lasts 4-10 milliseconds
    FastLED.showColor(CHSV(255, 0, 0));
    
    if (flashCounter == 0) delay (150);   // longer delay until next flash after the leader
    delay(50+random8(100));               // shorter delay between strokes  
  }
  delay(random8(FREQUENCY)*10);          // delay between strikes
}

void meteor(){
  // slide all the pixels down one in the array
  memmove8( &leds[1], &leds[0], (NUM_LEDS - 1) * 3 );

  // increment the meteor display frame
  idex++;
  // make sure we don't drift into space
  if ( idex > meteorLength ) {
    idex = 0;
    // cycle through hues in each successive meteor tail
    hue += 32;  
  }

  // this switch controls the actual meteor animation, i.e., what gets placed in the
  // first position and then subsequently gets moved down the strip by the memmove above
  switch ( idex ) {
  case 0:
    leds[0] = CRGB(200,200,200); 
    break;
  case 1:
    leds[0] = CHSV((hue - 20), 255, 210); 
    break;
  case 2:
    leds[0] = CHSV((hue - 22), 255, 180); 
    break;
  case 3:
    leds[0] = CHSV((hue - 23), 255, 150); 
    break;
  case 4:
    leds[0] = CHSV((hue - 24), 255, 110); 
    break;
  case 5:
    leds[0] = CHSV((hue - 25), 255, 90); 
    break;
  case 6:
    leds[0] = CHSV((hue - 26), 160, 60); 
    break;
  case 7:
    leds[0] = CHSV((hue - 27), 140, 40); 
    break;
  case 8:
    leds[0] = CHSV((hue - 28), 120, 20); 
    break;
  case 9:
    leds[0] = CHSV((hue - 29), 100, 20); 
    break;
  default:
    leds[0] = CRGB::Black; 
  }

  // show the blinky
  FastLED.show();  
  // control the animation speed/frame rate
  delay(20);
} 

void colorshift() {
    //beatsin16 is a function on the FastLED library generating sinwave, (5) is bpm, (0,255) is value range.
    //value range will create the breathing effect 
    //int pos = beatsin16(5,0,192); // generating the sinwave 
    fill_solid(leds, NUM_LEDS, CHSV( gHue, 255, 255)); // CHSV (hue, saturation, value);
    FastLED.show();
    EVERY_N_MILLISECONDS(100) {gHue++;} 
    // shifting the HUE value by incrementing every millisecond this creates the spectrum wave

    /* spectrum wave
     * fill_solid(leds, NUM_LEDS, CHSV( gHue, 255, 255)); // remove pos
     * FastLED.show();
     * EVERY_N_MILLISECONDS(100) {gHue++;} 
     */
     //additional codes, just to share
    /* color spectrum generator
     *  fill_rainbow( leds, NUM_LEDS, gHue, 3);
     */
}
