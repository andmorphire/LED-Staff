#include "FastLED.h"

// This sketch shows how to sequence a performance using HH,MM,SS.SSS timecode.
//
// A "ResetPerformance" method is provided so that the performance can be
// restarted from a custom external trigger, e.g., a button or event.
// For demonstration purposes, this Performance is reset if the
// sketch receives a letter "r" on the serial port.
//
// -Mark Kriegsman, January 2015

#if FASTLED_VERSION < 3001000
#error "Requires FastLED 3.1 or later; check github for latest code."
#endif

#define DATA_PIN    3
//#define CLK_PIN   4
#define LED_TYPE    WS2812B
#define COLOR_ORDER GRB
#define NUM_LEDS    90
CRGB leds[NUM_LEDS];

#define BRIGHTNESS          255
#define FRAMES_PER_SECOND  240


#define FREQUENCY     1                // controls the interval between strikes for lightning
#define FLASHES       5                 // the upper limit of flashes per strike for lightning
// #define color White; //for lightning- do we need this?
unsigned int dimmer = 1; // for lightning

uint8_t hue = 32;  //for meteor
byte idex = 255;   //for meteor
byte meteorLength = 29;  //for meteor


volatile uint8_t style = 0; //for strobe
volatile long lastRun = 0;  //for strobe
const uint8_t pause = 20;   //for strobe



void setup() {
  delay(300); // 0.3 second delay for recovery
  
  // tell FastLED about the LED strip configuration
  FastLED.addLeds<LED_TYPE,DATA_PIN,COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
  //FastLED.addLeds<LED_TYPE,DATA_PIN,CLK_PIN,COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);

  // set master brightness control
  FastLED.setBrightness(BRIGHTNESS);
  
  // RestartPerformance();
  Serial.begin(57600);
}


uint8_t gHue = 0; // rotating "base color" used by many of the patterns
  
uint32_t gTimeCodeBase = 0;
uint32_t gTimeCode = 0;
uint32_t gLastTimeCodeDoneAt = 0;
uint32_t gLastTimeCodeDoneFrom = 0;

#define TC(HOURS,MINUTES,SECONDS) \
  ((uint32_t)(((uint32_t)((HOURS)*(uint32_t)(3600000))) + \
  ((uint32_t)((MINUTES)*(uint32_t)(60000))) + \
  ((uint32_t)((SECONDS)*(uint32_t)(1000)))))


#define AT(HOURS,MINUTES,SECONDS) if( atTC(TC(HOURS,MINUTES,SECONDS)) )
#define FROM(HOURS,MINUTES,SECONDS) if( fromTC(TC(HOURS,MINUTES,SECONDS)) )

static bool atTC( uint32_t tc)
{
  bool maybe = false;
  if( gTimeCode >= tc) {
    if( gLastTimeCodeDoneAt < tc) {
      maybe = true;
      gLastTimeCodeDoneAt = tc;
    }
  }
  return maybe;
}

static bool fromTC( uint32_t tc)
{
  bool maybe = false;
  if( gTimeCode >= tc) {
    if( gLastTimeCodeDoneFrom <= tc) {
      maybe = true;
      gLastTimeCodeDoneFrom = tc;
    }
  }
  return maybe;
}


// There are two kinds of things you can put into this performance:
// "FROM" and "AT".
//
// * "FROM" means starting FROM this time AND CALLING IT REPEATEDLY 
//   until the next "FROM" time comes.
//
// * "AT" means do this ONE TIME ONLY "AT" the designated time.
//
// At least one of the FROM clauses will ALWAYS be executed.
// In the transitional times, TWO pieces of code will be executed back to back.
// For example, if one piece says "FROM(0,0,1.000) {DrawRed()}" and another says
// "FROM(0,0,2.000) {flashblue();}", what you'll get is this:
//   00:00:01.950  -> calls DrawRed
//   00:00:01.975  -> calls DrawRed
//   00:00:02.000  -> calls DrawRed AND calls DrawBlue !
//   00:00:02.025  -> calls DrawBlue
//   00:00:02.050  -> calls DrawBlue
// In most cases, this probably isn't significant in practice, but it's important
// to note.  It could be avoided by listing the sequence steps in reverse
// chronological order, but that makes it hard to read.

void Performance()
{
    AT(0,0,00.001) { FastLED.setBrightness(BRIGHTNESS); }
  FROM(0,0,00.100) { confetti(); }
  FROM(0,0,04.020) { sinelon(); }
  FROM(0,0,11.510) { juggle(); }
  FROM(0,0,27.560) { bpm(); }
  FROM(0,0,32.000) { fadeToBlack(); }
  FROM(0,0,34.000) { strobe(); }
  FROM(0,0,38.550) { povC(); }
  FROM(0,0,51.050) { povA(); }
  FROM(0,1,07.030) { colorshift(); }
  FROM(0,1,21.050) { rainbowWithGlitter(); }
  FROM(0,1,35.330) { bpm(); }
  FROM(0,1,46.070) { sinelon(); }
  FROM(0,1,50.060) { juggle(); }
  FROM(0,2,02.010) { colorshift(); }
  FROM(0,2,15.810) { rainbowWithGlitter(); }
  FROM(0,2,25.000) { fadeToBlack(); }
  FROM(0,2,27.000) { strobe(); }
  FROM(0,2,29.500) { povD(); }
  FROM(0,2,34.500) { povB(); }
  FROM(0,2,40.500) { povC(); }
  FROM(0,2,46.520) { povA(); }
  FROM(0,3,00.000) { confetti(); }
  FROM(0,3,05.990) { fadeToBlack(); }
  // FROM(0,2,38.590) { confetti(); }
  // FROM(0,2,42.200) { povA(); }
//  FROM(0,2,49.000) { povB(); }
//  FROM(0,2,56.750) { colorshift(); }
//  FROM(0,3,08.750) { confetti(); }
//    AT(0,3,09.000)   { gHue = HUE_PINK; }
//    AT(0,3,10.000)   { fill_solid(leds, NUM_LEDS, CRGB::Red); }
//    AT(0,3,11.000)   { fill_solid(leds, NUM_LEDS, CRGB::Blue); } 
//  FROM(0,3,12.000) { applause(); }  
//    AT(0,3,13.000)   { FastLED.setBrightness(BRIGHTNESS/2); }
//    AT(0,3,14.000)   { FastLED.setBrightness(BRIGHTNESS/4); }
//    AT(0,3,15.000)   { FastLED.setBrightness(BRIGHTNESS/8); }
//    AT(0,3,16.000)   { FastLED.setBrightness(BRIGHTNESS/16); }
//  FROM(0,3,17.000) { fadeToBlack(); }  
  //  AT(0,3,18.000)   { RestartPerformance(); }
}


void loop()
{
  // Set the current timecode, based on when the performance started
  gTimeCode = millis() - gTimeCodeBase;

  Performance();

  // send the 'leds' array out to the actual LED strip
  FastLED.show();  
  // insert a delay to keep the framerate modest
  FastLED.delay(1000/FRAMES_PER_SECOND); 

  // For demo purposes, restart the performance any time we read
  // the letter "r" character from the serial port.  Type "r" into 
  // the Arduino serial monitor and press return to restart the performance.
  // In practice, you could have this check a 'restart' button, or something similar.
  // if( Serial.read() == 'r') RestartPerformance();

  // do some periodic updates
  EVERY_N_MILLISECONDS( 20 ) { gHue++; } // slowly cycle the "base color" through the rainbow
    
}


void RestartPerformance()
{
  gLastTimeCodeDoneAt = 0;
  gLastTimeCodeDoneFrom = 0;
  gTimeCodeBase = millis();
}

void rainbow() 
{
  // FastLED's built-in rainbow generator
  fill_rainbow( leds, NUM_LEDS, gHue, 7);
}

void rainbowWithGlitter() 
{
  // built-in FastLED rainbow, plus some random sparkly glitter
  rainbow();
  addGlitter(80);
}

void addGlitter( fract8 chanceOfGlitter) 
{
  if( random8() < chanceOfGlitter) {
    leds[ random16(NUM_LEDS) ] += CRGB::White;
  }
}

void confetti() 
{
  // random colored speckles that blink in and fade smoothly
  fadeToBlackBy( leds, NUM_LEDS, 10);
  int pos = random16(NUM_LEDS);
  leds[pos] += CHSV( gHue + random8(64), 200, 255);
}

void bpm()
{
  // colored stripes pulsing at a defined Beats-Per-Minute (BPM)
  uint8_t BeatsPerMinute = 62;
  CRGBPalette16 palette = PartyColors_p;
  uint8_t beat = beatsin8( BeatsPerMinute, 64, 255);
  for( int i = 0; i < NUM_LEDS; i++) { //9948
    leds[i] = ColorFromPalette(palette, gHue+(i*2), beat-gHue+(i*10));
  }
}

void juggle() {
  // eight colored dots, weaving in and out of sync with each other
  fadeToBlackBy( leds, NUM_LEDS, 20);
  byte dothue = 0;
  for( int i = 0; i < 8; i++) {
    leds[beatsin16(i+7,0,NUM_LEDS -1)] |= CHSV(dothue, 200, 255);
    dothue += 32;
  }
}

void sinelon()
{
  // a colored dot sweeping back and forth, with fading trails
  fadeToBlackBy( leds, NUM_LEDS, 20);
  int pos = beatsin16(13,0,NUM_LEDS -1);
  leds[pos] += CHSV( gHue, 255, 192);
}

//void twosinelon()
//{
//  // a colored dot sweeping back and forth, with fading trails
//  fadeToBlackBy( leds, NUM_LEDS, 20);
//  int pos = beatsin16(13,0,NUM_LEDS -1);
//  int pos2 = beatsin16(13,NUM_LEDS -1,1);
//  leds[pos] += CHSV( gHue, 255, 192);
//  leds[pos2] += CHSV( gHue, 255, 192);
//}

// An animation to play while the crowd goes wild after the big performance
void applause()
{
  static uint16_t lastPixel = 0;
  fadeToBlackBy( leds, NUM_LEDS, 32);
  leds[lastPixel] = CHSV(random8(HUE_BLUE,HUE_PURPLE),255,255);
  lastPixel = random16(NUM_LEDS);
  leds[lastPixel] = CRGB::White;
}

// An "animation" to just fade to black.  Useful as the last track
// in a non-looping performance.
void fadeToBlack()
{
  fadeToBlackBy( leds, NUM_LEDS, 1);
}


//big fire
const byte dataA[] PROGMEM = {};
void povA() {
  int pixels = 48;
  int frames = 16;
  int fps = 600;
  static int currentFrame = 0;

  for (int i=0; i<NUM_LEDS; i++) {
    int pixelIndex = i % pixels;
    int index = currentFrame*pixels*3 + pixelIndex*3;

    // Note: We're using pgm_read_byte_near to read bytes out of the data array stored in PROGMEM. These functions are not required for all configurations
    leds[i] = CRGB (pgm_read_byte_near(dataA+index),pgm_read_byte_near(dataA+index+1),pgm_read_byte_near(dataA+index+2));
//    leds[i] = leds[i]-;
  }
  FastLED.show();
  currentFrame ++;
  if (currentFrame >= frames) currentFrame = 0;
}

//big lightning
const byte dataB[] PROGMEM = {9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,6,2,26,4,2,30,4,2,30,4,2,30,4,2,30,4,2,30,10,2,35,6,3,39,6,3,39,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,1,3,21,1,3,21,1,3,21,1,3,21,1,3,21,0,4,25,6,2,26,6,2,26,4,2,30,2,4,35,6,3,39,10,3,45,13,4,50,15,4,56,16,4,62,8,4,60,15,4,56,15,4,56,13,4,50,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,1,3,21,1,3,21,1,3,21,1,3,21,1,3,21,6,2,26,4,2,30,6,3,39,13,4,50,9,4,66,21,6,76,15,9,82,23,10,92,31,13,103,34,21,117,45,26,131,37,20,123,38,15,114,21,13,107,31,13,103,37,24,100,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,6,2,26,6,2,26,6,2,26,6,2,26,6,2,26,6,2,26,6,2,26,6,2,26,6,2,26,4,2,30,4,2,30,10,2,35,6,3,39,10,3,45,13,4,50,16,4,62,15,9,82,30,6,92,45,30,113,77,61,136,119,101,168,149,133,196,177,163,215,185,177,225,177,163,215,149,133,203,129,116,196,134,117,192,167,150,215,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,1,3,21,9,1,21,6,2,26,6,2,26,4,2,30,4,2,30,2,4,35,2,4,35,10,2,35,6,3,39,14,2,40,10,3,45,13,4,50,8,4,60,16,4,62,9,4,66,17,3,67,10,5,72,21,6,76,22,4,81,22,4,81,22,4,81,22,4,81,24,3,88,30,9,108,44,15,124,72,54,148,125,107,181,176,155,227,167,146,218,149,133,196,149,133,203,155,142,211,161,148,218,171,156,220,194,174,234,207,184,239,195,170,238,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,6,2,26,4,2,30,6,3,39,10,3,45,13,4,50,7,4,55,15,4,56,9,4,66,21,6,76,24,3,88,20,6,95,32,4,99,31,13,103,31,13,103,31,13,103,35,17,108,36,25,114,44,31,121,44,28,125,44,28,125,51,34,132,52,31,137,65,49,154,109,90,182,155,130,209,165,148,225,163,138,217,127,101,196,79,53,162,52,24,146,62,32,156,66,41,169,89,62,186,105,79,198,119,92,213,126,99,222,135,111,227,9,1,21,9,1,21,6,2,26,9,1,21,9,1,21,6,2,26,4,2,30,4,2,30,4,2,30,10,2,35,10,3,45,15,4,56,16,4,62,17,3,67,21,6,76,28,9,87,35,17,108,51,34,132,81,63,157,114,96,175,149,133,203,160,139,210,160,139,210,160,139,210,176,155,227,175,163,233,171,156,220,180,163,228,189,169,229,189,169,229,187,170,235,176,164,221,149,133,196,104,86,165,80,61,169,87,60,170,86,63,166,97,76,186,113,89,195,129,101,210,113,89,195,86,63,166,57,35,142,44,22,135,44,22,135,6,2,26,4,2,30,4,2,30,10,2,35,10,2,35,10,3,45,7,4,55,8,4,60,16,4,62,17,3,67,24,3,88,26,5,104,35,8,116,43,19,119,59,35,129,87,68,157,129,116,196,161,148,218,169,156,226,148,131,207,109,90,182,89,69,165,89,69,165,94,75,171,89,69,165,86,63,166,75,55,157,72,54,148,89,68,151,125,107,181,142,125,200,144,123,206,134,112,200,125,104,192,117,97,190,109,90,182,117,97,190,125,104,192,81,63,157,45,26,131,44,15,124,30,9,108,30,9,108,26,5,104,26,5,104,4,2,30,4,2,30,2,4,35,10,2,35,6,3,39,13,4,50,16,4,62,10,5,72,21,6,76,21,6,76,34,10,97,43,19,119,72,54,148,133,115,183,188,173,224,208,190,237,177,163,215,125,107,181,81,63,157,72,45,161,69,38,162,62,32,156,52,24,146,51,17,135,44,22,135,44,22,135,38,17,129,38,17,129,35,8,116,44,15,124,37,20,123,44,15,124,44,15,124,44,15,124,44,22,135,52,27,141,58,32,146,52,27,141,52,27,141,52,27,141,44,22,135,52,23,132,53,27,128,44,28,125,44,23,115,6,3,39,10,3,45,15,4,56,17,3,67,15,9,82,20,6,95,30,9,108,26,12,115,37,20,123,44,28,125,61,49,147,96,81,164,160,139,210,194,174,234,171,156,220,142,128,209,150,130,219,139,120,208,131,109,206,131,109,206,134,112,200,150,130,219,155,130,209,136,116,198,136,116,198,125,104,192,94,75,171,79,53,162,74,53,167,79,53,162,63,40,147,52,31,137,71,46,154,97,76,186,116,85,200,95,63,182,64,42,163,72,45,161,72,45,161,72,45,161,72,45,161,71,46,154,71,46,154,63,40,147,52,31,137,15,4,56,20,8,71,28,9,87,31,13,103,52,29,122,81,63,157,109,94,179,129,116,196,149,133,203,167,150,215,188,173,224,208,198,243,215,202,241,191,182,230,156,142,205,133,115,183,133,115,183,160,139,210,165,144,229,154,138,221,151,129,213,144,123,206,144,123,206,151,129,213,151,129,213,165,148,225,172,154,232,150,130,219,127,101,196,116,85,200,119,92,213,135,111,227,138,114,223,153,127,231,151,129,226,166,141,233,151,129,226,144,118,221,151,129,226,150,130,219,163,138,217,155,138,214,163,138,217,139,120,208,114,90,187,17,7,88,35,17,108,61,49,147,109,94,179,167,150,215,206,191,244,198,189,227,190,177,216,164,147,204,164,147,204,188,173,224,208,190,237,177,163,215,177,163,215,190,177,216,198,189,227,208,198,243,198,183,236,155,130,209,105,85,183,93,68,172,105,85,183,117,97,190,117,97,190,117,97,190,117,97,190,150,130,219,174,156,240,180,161,240,175,163,233,189,177,235,217,199,247,221,207,247,217,199,247,215,202,241,221,207,247,227,211,245,227,211,245,221,207,247,221,207,247,215,202,241,208,190,237,208,190,237,208,198,243,206,191,244,44,28,125,109,90,182,171,156,220,215,202,241,221,207,247,191,182,230,188,173,224,188,173,224,188,173,224,180,163,228,160,139,210,114,91,178,70,48,149,52,31,137,57,35,142,71,46,154,94,75,171,144,123,206,176,155,227,185,160,228,182,161,233,182,161,233,167,146,218,178,158,216,198,183,236,208,198,243,208,198,243,208,198,243,208,198,243,208,198,243,191,182,230,194,174,234,186,166,240,165,142,240,129,101,210,109,85,204,129,101,210,165,142,240,166,141,233,151,129,226,131,109,206,138,119,219,154,138,221,191,182,230,207,204,241,71,54,135,134,117,192,198,183,236,208,190,237,155,138,214,97,76,186,64,42,163,57,35,142,59,39,139,53,27,128,44,22,135,38,17,129,38,17,129,44,15,124,44,15,124,52,27,141,58,32,146,64,37,153,71,46,154,75,55,157,75,55,157,71,46,154,72,45,161,74,53,167,92,68,179,97,76,186,97,76,186,113,89,195,113,89,195,97,76,186,82,55,179,75,47,177,89,62,186,109,85,204,126,99,222,138,108,232,128,95,225,113,79,214,113,79,214,116,90,219,125,101,215,138,114,223,144,130,224,175,163,233,221,213,246,68,49,118,133,115,183,164,147,204,189,169,229,171,147,213,104,82,168,57,35,142,45,26,131,37,20,123,52,23,132,53,27,128,72,54,148,105,83,175,118,99,185,125,104,192,118,97,197,108,86,197,105,79,198,98,72,190,89,62,186,89,62,186,95,63,182,79,49,167,58,37,157,52,24,146,51,17,135,38,17,129,38,17,129,38,17,129,44,22,135,52,27,141,71,46,154,118,97,197,171,141,228,165,144,229,171,145,225,165,144,229,165,144,229,165,148,225,171,156,220,187,170,235,182,168,239,187,170,235,208,198,243,215,202,241,17,7,88,31,13,103,59,35,129,104,86,165,167,146,218,182,161,233,178,154,221,171,147,213,156,142,205,164,147,204,178,158,216,194,174,234,192,178,243,180,163,228,167,146,218,167,146,218,172,154,232,163,138,217,114,91,178,63,40,147,51,17,135,41,15,137,41,15,137,41,15,137,43,10,128,38,17,129,38,17,129,41,15,137,45,18,140,58,32,146,93,68,172,146,122,199,195,170,238,195,170,238,185,160,228,185,160,228,185,160,228,187,170,235,189,169,229,188,173,224,188,173,224,189,169,229,187,170,235,176,155,227,134,112,200,13,4,50,16,4,62,26,6,72,29,13,83,47,33,104,71,54,135,77,61,136,81,68,150,96,81,164,96,81,164,96,81,164,89,68,151,72,51,139,51,34,132,52,23,132,58,32,146,86,63,166,136,116,198,176,155,227,148,131,207,104,82,168,73,48,143,59,39,139,52,23,132,52,27,141,52,24,146,52,24,146,68,36,147,104,82,168,167,146,218,182,161,233,178,150,224,146,122,199,114,91,178,87,68,157,72,54,148,72,54,148,70,48,149,53,40,143,53,40,143,61,49,147,87,68,157,87,68,157,59,43,128,52,29,122,4,2,30,6,3,39,13,4,50,16,4,62,17,3,67,15,9,82,22,4,81,22,4,81,22,4,81,17,7,88,24,3,88,24,3,88,24,3,88,24,3,88,24,3,88,25,9,99,26,12,115,53,40,143,114,96,175,160,139,210,176,155,227,178,154,221,178,154,221,160,139,210,144,124,194,144,124,194,144,124,194,142,125,200,171,145,225,171,145,225,105,83,175,58,32,146,44,22,135,44,15,124,30,9,108,25,9,99,23,10,92,25,9,99,20,6,95,30,6,92,20,6,95,25,9,99,21,13,107,25,9,99,30,6,92,6,2,26,4,2,30,2,4,35,10,2,35,6,3,39,6,3,39,10,2,35,10,2,35,10,3,45,10,3,45,5,4,49,13,4,50,5,4,49,10,3,45,13,4,50,16,4,62,22,4,81,20,6,95,25,9,99,34,21,117,53,27,128,72,54,148,117,97,190,136,116,198,134,117,192,133,115,183,133,115,183,134,117,192,114,96,175,72,51,139,43,19,119,30,9,108,26,5,104,30,16,98,21,6,76,9,4,66,9,4,66,9,4,66,9,4,66,16,4,62,16,4,62,16,4,62,17,3,67,17,3,67,9,4,66,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,9,1,21,1,3,21,1,3,21,1,3,21,1,3,21,9,1,21,9,1,21,4,2,30,6,3,39,5,4,49,7,4,55,8,4,60,22,4,81,30,9,108,59,39,139,86,63,166,63,40,147,44,22,135,44,22,135,58,32,146,62,32,156,58,37,157,52,27,141,44,15,124,37,20,123,26,12,115,25,9,99,21,6,76,16,4,62,9,4,66,9,4,66,16,4,62,15,4,56,13,4,50,13,4,50,10,3,45,10,2,35,6,2,26,9,1,21,9,1,21,1,3,21,1,3,21,1,3,21,1,3,21,1,3,21,1,3,21,1,3,21,1,3,21,0,4,25,0,4,25,6,2,26,6,2,26,6,2,26,6,2,26,6,2,26,6,2,26,10,2,35,16,4,62,17,7,88,30,16,98,59,43,128,73,48,143,70,48,149,75,55,157,70,48,149,52,31,137,52,23,132,53,27,128,52,29,122,59,35,129,59,43,135,72,51,139,59,49,127,47,32,110,30,16,98,15,9,82,20,8,71,7,4,55,10,3,45,10,3,45,10,3,45,10,2,35,4,2,30,9,1,21,9,1,21,9,1,21,1,3,21,1,3,21,1,3,21,1,3,21,9,1,21,9,1,21,9,1,21,6,2,26,6,2,26,6,2,26,6,2,26,9,1,21,9,1,21,9,1,21,9,1,21,6,2,26,4,2,30,10,2,35,6,3,39,5,4,49,7,4,55,8,4,60,16,4,62,17,3,67,21,6,76,17,3,67,15,4,56,10,3,45,10,3,45,13,4,50,15,4,56,16,4,62,10,5,72,21,6,76,10,5,72,15,4,56,10,3,45,10,2,35,4,2,30,4,2,30,6,2,26,9,1,21};
void povB() {
  int pixels = 45;
  int frames = 22;
  int fps = 1;
  static int currentFrame = 0;

  for (int i=0; i<NUM_LEDS; i++) {
    int pixelIndex = i % pixels;
    int index = currentFrame*pixels*3 + pixelIndex*3;

    // Note: We're using pgm_read_byte_near to read bytes out of the data array stored in PROGMEM. These functions are not required for all configurations
    leds[i] = CRGB(pgm_read_byte_near(dataB+index),pgm_read_byte_near(dataB+index+1),pgm_read_byte_near(dataB+index+2));
  }
  FastLED.show();
  currentFrame ++;
  if (currentFrame >= frames) currentFrame = 0;
}

//small fire
const byte dataC[] PROGMEM = {};
void povC() {
  int pixels = 90;
  int frames = 36;
  int fps = 1;
  static int currentFrame = 0;

  for (int i=0; i<NUM_LEDS; i++) {
    int pixelIndex = i % pixels;
    int index = currentFrame*pixels*3 + pixelIndex*3;

    // Note: We're using pgm_read_byte_near to read bytes out of the data array stored in PROGMEM. These functions are not required for all configurations
    leds[i] = CRGB(pgm_read_byte_near(dataC+index),pgm_read_byte_near(dataC+index+1),pgm_read_byte_near(dataC+index+2));
  }
  FastLED.show();
  currentFrame ++;
  if (currentFrame >= frames) currentFrame = 0;
}


//small lightning
const byte dataD[] PROGMEM = {0,1,5,4,0,6,4,0,6,0,1,0,0,1,0,1,0,14,1,0,14,4,0,6,0,1,0,0,1,0,4,0,6,4,0,6,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,5,4,0,6,4,0,6,4,0,6,0,1,5,0,1,0,0,1,5,4,0,6,0,1,0,0,2,20,0,2,20,4,0,6,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,4,0,6,4,0,6,28,21,39,51,48,77,53,46,82,16,10,54,23,12,57,47,34,82,61,57,99,48,38,80,26,15,60,3,2,15,0,1,5,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,5,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,5,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,83,67,131,121,115,161,169,159,203,210,196,236,196,180,233,132,116,190,121,101,181,159,145,215,198,182,235,169,152,217,112,93,173,65,51,137,38,16,83,9,1,21,0,2,20,0,1,5,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,179,162,227,202,192,237,210,196,236,216,203,243,219,206,246,216,203,243,226,212,252,218,200,247,169,148,220,191,169,243,204,179,247,162,145,222,102,83,174,59,46,131,69,44,139,42,17,104,27,10,69,4,0,6,0,1,5,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,167,145,230,90,73,175,84,65,173,92,72,181,108,86,198,128,111,211,171,153,231,189,167,241,175,145,232,147,122,212,166,141,220,210,187,242,212,194,242,193,175,221,151,131,202,113,90,189,102,83,174,9,1,21,4,0,6,13,7,37,23,12,57,16,12,40,0,1,5,0,1,0,0,1,0,0,1,0,4,0,6,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,5,4,0,6,98,69,182,58,34,162,54,21,153,51,25,161,66,40,169,92,69,186,119,91,212,140,114,231,156,132,243,176,149,243,187,161,242,159,136,234,178,154,220,222,205,240,225,216,248,179,165,236,119,103,201,75,59,147,93,76,165,111,88,187,116,97,189,123,107,193,70,58,114,12,7,47,4,0,6,4,0,6,0,1,5,4,0,6,1,0,14,4,0,6,1,0,14,4,0,6,0,1,0,0,1,5,0,1,5,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,5,70,42,158,50,22,144,48,27,154,81,56,179,119,91,212,136,103,221,121,94,215,110,84,204,92,69,186,92,72,181,118,95,195,184,158,239,169,148,220,188,173,225,230,222,254,217,211,249,181,176,232,188,179,242,166,155,244,139,121,222,140,118,213,146,128,217,126,106,200,98,77,174,75,59,147,81,65,140,69,54,128,67,48,129,61,40,127,55,40,131,45,29,126,41,27,104,52,39,87,47,37,90,19,7,48,4,0,6,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,72,44,160,70,42,158,110,80,194,145,119,223,119,92,199,65,44,144,42,17,104,20,4,52,7,4,40,15,7,53,61,38,145,123,95,204,167,136,236,159,136,234,179,170,233,229,223,242,210,207,231,209,203,241,171,162,224,158,142,206,189,176,234,207,189,236,193,173,233,165,143,228,162,136,228,191,164,245,178,155,241,179,153,233,166,141,220,152,131,214,132,112,193,132,116,190,171,153,231,170,145,224,99,77,162,26,15,60,0,2,20,0,1,5,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,152,127,218,153,131,228,133,105,201,65,54,121,21,9,55,20,4,52,1,0,14,0,1,0,0,1,0,0,1,5,22,7,60,37,16,95,61,33,135,70,42,158,74,56,150,132,116,190,180,168,225,196,180,233,200,180,240,212,196,250,196,180,233,167,148,207,174,154,213,198,175,230,218,200,247,218,200,247,203,183,243,210,187,242,207,191,244,210,187,242,213,190,245,206,186,247,197,172,240,204,179,247,176,155,227,83,63,145,46,25,117,37,16,95,6,1,25,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,4,0,6,0,2,33,8,1,43,83,63,145,119,95,183,57,43,104,4,0,6,0,1,5,4,0,6,0,1,0,0,1,0,0,1,0,1,0,14,4,0,6,0,1,0,1,0,14,15,6,57,14,4,51,45,30,95,70,54,117,76,57,127,100,82,160,121,101,181,94,73,157,51,35,89,42,36,70,64,50,89,97,80,134,105,87,153,101,80,153,97,76,148,92,71,143,97,76,148,106,84,170,102,83,174,106,84,170,143,119,196,203,183,243,191,171,231,141,121,203,116,93,193,66,44,132,10,3,45,0,1,0,0,1,0,0,1,0,5,3,30,28,20,88,76,56,138,104,86,164,10,3,45,12,7,47,4,0,6,0,1,0,4,0,6,0,1,5,0,1,0,0,1,0,0,1,0,0,1,0,0,1,5,0,1,5,0,1,0,0,1,0,0,1,0,0,1,0,0,1,5,4,0,6,9,4,27,16,12,40,5,3,30,0,1,5,0,1,5,0,1,5,0,1,5,4,0,6,3,2,15,9,1,21,0,2,20,5,3,30,18,8,64,15,3,41,10,3,35,43,27,81,107,92,164,160,139,210,200,180,240,191,169,243,126,106,200,49,26,106,10,3,35,8,3,26,21,10,72,57,37,123,123,103,184,178,157,229,162,145,222,0,1,5,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,5,0,1,0,0,1,5,0,1,5,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,5,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,14,8,38,54,41,113,108,90,169,186,164,237,164,142,226,92,71,168,56,37,136,96,78,156,127,104,179,166,138,212,187,163,230,128,108,177,51,35,114,0,1,0,0,1,5,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,5,0,1,5,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,5,4,0,6,28,14,66,118,100,167,207,191,244,183,164,223,153,136,212,197,172,240,176,155,227,145,124,206,82,63,122,17,8,34,0,2,20,0,1,0,4,0,6,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,29,27,55,138,126,163,217,201,235,207,196,241,194,177,243,129,112,199,75,53,155,29,8,74,0,1,5,1,0,14,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,15,11,31,77,66,110,97,83,154,112,97,169,108,89,181,108,86,198,92,64,175,53,34,120,55,40,131,0,1,0,8,4,10,8,4,10,4,0,6,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,5,0,1,5,0,1,5,4,0,6,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,4,0,6,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,4,0,6,0,1,5,0,1,5,4,0,6,4,0,6,1,0,14,6,1,25,0,2,20,0,1,0,4,0,6,0,2,20,3,2,15,6,1,25,27,20,70,83,56,153,119,92,199,119,92,199};
void povD() {
  int pixels = 47;
  int frames = 16;
  int fps = 1;
  static int currentFrame = 0;

  for (int i=0; i<NUM_LEDS; i++) {
    int pixelIndex = i % pixels;
    int index = currentFrame*pixels*3 + pixelIndex*3;

    // Note: We're using pgm_read_byte_near to read bytes out of the data array stored in PROGMEM. These functions are not required for all configurations
    leds[i] = CRGB(pgm_read_byte_near(dataD+index),pgm_read_byte_near(dataD+index+1),pgm_read_byte_near(dataD+index+2));
  }
  FastLED.show();
  currentFrame ++;
  if (currentFrame >= frames) currentFrame = 0;
}

void lightning() 
{
  for (int flashCounter = 0; flashCounter < random8(3,FLASHES); flashCounter++)
  {
    if(flashCounter == 0) dimmer = 5;     // the brightness of the leader is scaled down by a factor of 5
    else dimmer = random8(1,3);           // return strokes are brighter than the leader
    
    FastLED.showColor(CHSV(255, 0, 255/dimmer));
    delay(random8(4,10));                 // each flash only lasts 4-10 milliseconds
    FastLED.showColor(CHSV(255, 0, 0));
    
    if (flashCounter == 0) delay (150);   // longer delay until next flash after the leader
    delay(50+random8(100));               // shorter delay between strokes  
  }
  delay(random8(FREQUENCY)*10);          // delay between strikes
}

void meteor(){
  // slide all the pixels down one in the array
  memmove8( &leds[1], &leds[0], (NUM_LEDS - 1) * 3 );

  // increment the meteor display frame
  idex++;
  // make sure we don't drift into space
  if ( idex > meteorLength ) {
    idex = 0;
    // cycle through hues in each successive meteor tail
    hue += 32;  
  }

  // this switch controls the actual meteor animation, i.e., what gets placed in the
  // first position and then subsequently gets moved down the strip by the memmove above
  switch ( idex ) {
  case 0:
    leds[0] = CRGB(200,200,200); 
    break;
  case 1:
    leds[0] = CHSV((hue - 20), 255, 210); 
    break;
  case 2:
    leds[0] = CHSV((hue - 22), 255, 180); 
    break;
  case 3:
    leds[0] = CHSV((hue - 23), 255, 150); 
    break;
  case 4:
    leds[0] = CHSV((hue - 24), 255, 110); 
    break;
  case 5:
    leds[0] = CHSV((hue - 25), 255, 90); 
    break;
  case 6:
    leds[0] = CHSV((hue - 26), 160, 60); 
    break;
  case 7:
    leds[0] = CHSV((hue - 27), 140, 40); 
    break;
  case 8:
    leds[0] = CHSV((hue - 28), 120, 20); 
    break;
  case 9:
    leds[0] = CHSV((hue - 29), 100, 20); 
    break;
  default:
    leds[0] = CRGB::Black; 
  }

  // show the blinky
  FastLED.show();  
  // control the animation speed/frame rate
  // delay(20);
} 

void colorshift() {
    //beatsin16 is a function on the FastLED library generating sinwave, (5) is bpm, (0,255) is value range.
    //value range will create the breathing effect 
    //int pos = beatsin16(5,0,192); // generating the sinwave 
    fill_solid(leds, NUM_LEDS, CHSV( gHue, 255, 255)); // CHSV (hue, saturation, value);
    FastLED.show();
    EVERY_N_MILLISECONDS(100) {gHue++;} 
    // shifting the HUE value by incrementing every millisecond this creates the spectrum wave

    /* spectrum wave
     * fill_solid(leds, NUM_LEDS, CHSV( gHue, 255, 255)); // remove pos
     * FastLED.show();
     * EVERY_N_MILLISECONDS(100) {gHue++;} 
     */
     //additional codes, just to share
    /* color spectrum generator
     *  fill_rainbow( leds, NUM_LEDS, gHue, 3);
     */
}

void strobe() {
  if (millis() - lastRun > pause) {
    if (style) {
      LEDS.showColor(CRGB::White);
    } else {
      LEDS.showColor(CRGB::Black);
    }
    style = !style;
    lastRun = millis();
  }
}

//Rainbow chase stuff

void setPixel(int Pixel, byte red, byte green, byte blue) {
 #ifdef ADAFRUIT_NEOPIXEL_H 
   // NeoPixel
   strip.setPixelColor(Pixel, strip.Color(red, green, blue));
 #endif
 #ifndef ADAFRUIT_NEOPIXEL_H 
   // FastLED
   leds[Pixel].r = red;
   leds[Pixel].g = green;
   leds[Pixel].b = blue;
 #endif
}

byte * Wheel(byte WheelPos) {
  static byte c[3];
  
  if(WheelPos < 85) {
   c[0]=WheelPos * 3;
   c[1]=255 - WheelPos * 3;
   c[2]=0;
  } else if(WheelPos < 170) {
   WheelPos -= 85;
   c[0]=255 - WheelPos * 3;
   c[1]=0;
   c[2]=WheelPos * 3;
  } else {
   WheelPos -= 170;
   c[0]=0;
   c[1]=WheelPos * 3;
   c[2]=255 - WheelPos * 3;
  }

  return c;
}

// theaterChaseRainbow(50);
void theaterChaseRainbow() {
  byte *c;
  
  for (int j=0; j < 256; j++) {     // cycle all 256 colors in the wheel
    for (int q=0; q < 3; q++) {
        for (int i=0; i < NUM_LEDS; i=i+3) {
          c = Wheel( (i+j) % 255);
          setPixel(i+q, *c, *(c+1), *(c+2));    //turn every third pixel on
        }
         FastLED.show();
       
//        delay(SpeedDelay);
       
        for (int i=0; i < NUM_LEDS; i=i+3) {
          setPixel(i+q, 0,0,0);        //turn every third pixel off
        }
    }
  }
}
